@startuml Manage Bookmark (GETAll)

header Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Bookmark (GETAll)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:campgrounds" as routerCampgrounds
participant "<<middleware>>\n:auth" as auth
participant "<<service>>\n:jwt" as jwt
participant "<<controllers>>\n:campgrounds" as controllersCampgrounds
participant "<<model>>\n:User" as modelUser
participant "<<model>>\n:Bookmark" as modelBookmark
database "<<MongoDB>>\n:users" as UsersDatabase
database "<<MongoDB>>\n:bookmarks" as BookmarksDatabase


client->server ++:req.get('/campgrounds/bookmark')
server->routerCampgrounds ++:app.use('/campgrounds',campgrounds)
routerCampgrounds -> auth ++:protect()
auth -> jwt ++:verify(token, JWT_SECRET)
auth <-- jwt --:decoded
auth -> modelUser ++:findById(decoded.id)
modelUser ->UsersDatabase ++:find({_id: decoded.id})
modelUser <-- UsersDatabase --:user
auth <-- modelUser --:req.user
routerCampgrounds <-- auth --:next()
routerCampgrounds -> controllersCampgrounds ++:getBookmarkCampgrounds

alt user.role == admin
    controllersCampgrounds->modelBookmark ++:find()
else
    controllersCampgrounds->modelBookmark :find({ user: req.user.id })
end

modelBookmark->BookmarksDatabase ++:BookmarkSchema
BookmarksDatabase --> modelBookmark --:bookmarks
controllersCampgrounds <-- modelBookmark --:bookmarks
controllersCampgrounds->client --:response

@enduml


@startuml Manage Bookmark (POST)

header Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Bookmark (POST)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:campgrounds" as routerCampgrounds
participant "<<middleware>>\n:auth" as auth
participant "<<service>>\n:jwt" as jwt
participant "<<controllers>>\n:campgrounds" as controllersCampgrounds
participant "<<model>>\n:User" as modelUser
participant "<<model>>\n:Campground" as modelCampground
participant "<<model>>\n:Bookmark" as modelBookmark
database "<<MongoDB>>\n:users" as UsersDatabase
database "<<MongoDB>>\n:campgrounds" as CampgroundsDatabase
database "<<MongoDB>>\n:bookmarks" as BookmarksDatabase


client->server ++:req.post('/campgrounds/bookmark')
server->routerCampgrounds ++:app.use('/campgrounds',campgrounds)
routerCampgrounds -> auth ++:protect()
auth -> jwt ++:verify(token, JWT_SECRET)
auth <-- jwt --:decoded
auth -> modelUser ++:findById(decoded.id)
modelUser ->UsersDatabase ++:find({_id: decoded.id})
modelUser <-- UsersDatabase --:user
auth <-- modelUser --:req.user
routerCampgrounds <-- auth --:next()
routerCampgrounds -> controllersCampgrounds ++:addBookmarkCampground

alt req.body.booked_campground_name !== null
    controllersCampgrounds->modelCampground ++:findOne({ name: campground_name,} )\n.select("_id")
    modelCampground ->CampgroundsDatabase ++:CampgroundSchema
    modelCampground <-- CampgroundsDatabase --:campground_by_name
    controllersCampgrounds<--modelCampground --:campground_by_name
end

controllersCampgrounds->modelCampground ++:findById(req.params.campgroundId)
modelCampground ->CampgroundsDatabase ++:CampgroundSchema
modelCampground <-- CampgroundsDatabase --:campground
controllersCampgrounds<--modelCampground --:campground

controllersCampgrounds->modelBookmark ++:find(req.body)
modelBookmark->BookmarksDatabase ++:BookmarkSchema
BookmarksDatabase --> modelBookmark --:existedBookmark
controllersCampgrounds <-- modelBookmark --:existedBookmark

alt existedBookmark.length == 0
    controllersCampgrounds->modelBookmark ++:create(req.body)
    modelBookmark->BookmarksDatabase ++:BookmarkSchema
    BookmarksDatabase --> modelBookmark --:bookmark
    controllersCampgrounds <-- modelBookmark --:bookmark
end

controllersCampgrounds->client --:response

@enduml


@startuml Manage Bookmark (DELETE)

header Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Bookmark (DELETE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:campgrounds" as routerCampgrounds
participant "<<middleware>>\n:auth" as auth
participant "<<service>>\n:jwt" as jwt
participant "<<controllers>>\n:campgrounds" as controllersCampgrounds
participant "<<model>>\n:User" as modelUser
participant "<<model>>\n:Bookmark" as modelBookmark
database "<<MongoDB>>\n:users" as UsersDatabase
database "<<MongoDB>>\n:bookmarks" as BookmarksDatabase

client->server ++:req.delete('/campgrounds/bookmark/:id')
server->routerCampgrounds ++:app.use('/campgrounds',campgrounds)
routerCampgrounds -> auth ++:protect()
auth -> jwt ++:verify(token, JWT_SECRET)
auth <-- jwt --:decoded
auth -> modelUser ++:findById(decoded.id)
modelUser ->UsersDatabase ++:find({_id: decoded.id})
modelUser <-- UsersDatabase --:user
auth <-- modelUser --:req.user
routerCampgrounds <-- auth --:next()
routerCampgrounds -> controllersCampgrounds ++:deleteBookmarkCampground

controllersCampgrounds->modelBookmark ++:findById(req.params.id)
modelBookmark->BookmarksDatabase ++:BookmarkSchema
BookmarksDatabase --> modelBookmark --:bookmark
controllersCampgrounds <-- modelBookmark --:bookmark

alt role !== admin && current user !== bookmark_user._id
    controllersCampgrounds->modelUser ++:findById(req.user.id)\n.select("username")
    modelUser ->UsersDatabase ++:UserSchema
    modelUser <-- UsersDatabase --:user
    controllersCampgrounds<--modelUser --:user

else
    controllersCampgrounds->modelBookmark ++:bookmark.deleteOne()
    modelBookmark->BookmarksDatabase ++:BookmarkSchema
    BookmarksDatabase --> modelBookmark --:{}
    controllersCampgrounds <-- modelBookmark --:{}
end

controllersCampgrounds->client --:response

@enduml